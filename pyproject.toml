[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jimini"
version = "0.2.0"
description = "AI Policy Enforcement Gateway with Security & Compliance Features"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Jimini Team", email = "team@jimini.ai"}
]
maintainers = [
    {name = "Jimini Team", email = "team@jimini.ai"}
]
keywords = ["ai", "policy", "security", "compliance", "gateway", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment", 
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Security",
    "Topic :: System :: Monitoring",
]
requires-python = ">=3.10"

# Core dependencies for all installations
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "PyYAML>=6.0",
    "python-dotenv>=1.0.0",
    "PyJWT>=2.8.0",
]

# Optional dependencies for different use cases
[project.optional-dependencies]
# Full server installation with all integrations
server = [
    "openai>=1.0.0",
    "elasticsearch>=8.0.0",
    "splunk-sdk>=1.7.0",
    "requests>=2.31.0",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

# Security scanning and compliance
security = [
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    "pip-audit>=2.6.0",
]

# Performance monitoring
monitoring = [
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
]

# All optional dependencies
all = [
    "jimini[server,dev,security,monitoring]"
]

[project.scripts]
# CLI tools
jimini = "jimini_cli.main:main"
jimini-cli = "jimini_cli.main:main"

# Server entry points  
jimini-server = "app.main:run_server"
jimini-uvicorn = "app.main:run_uvicorn"

# Admin tools
jimini-admin = "jimini_cli.main:admin_main"

[project.urls]
Homepage = "https://github.com/jimini-ai/jimini"
Documentation = "https://jimini.readthedocs.io"
Repository = "https://github.com/jimini-ai/jimini.git"
"Bug Reports" = "https://github.com/jimini-ai/jimini/issues"
Changelog = "https://github.com/jimini-ai/jimini/blob/main/CHANGELOG.md"

[tool.setuptools]
# Include both CLI and server packages
packages = ["app", "jimini_cli", "config"]
package-dir = {"" = "."}

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml"]

# Include policy packs and configuration files
[tool.setuptools.data-files]
"jimini/packs" = ["packs/**/*.yaml"]
"jimini/config" = ["*.yaml", "*.yml"]

# Development tools configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
pythonpath = ["."]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov=jimini_cli",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security-related",
]

[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "S",    # bandit
]
ignore = [
    "S101", # assert-used - pytest uses assert
    "S603", # subprocess-without-shell-equals-true
    "S607", # start-process-with-partial-path
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "S106", "S311"]
"scripts/**/*" = ["S101", "S603", "S607"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true
namespace_packages = true

[[tool.mypy.overrides]]
module = [
    "yaml.*",
    "openai.*",
    "elasticsearch.*",
    "splunklib.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["app", "jimini_cli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/scripts/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]