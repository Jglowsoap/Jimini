# Jimini AI Policy Gateway - Kubernetes Helm Values
# For production deployment with Kubernetes

# Application Configuration
app:
  name: jimini-ai-policy
  version: "0.2.0"
  port: 8000
  
image:
  repository: jimini
  tag: "0.2.0"
  pullPolicy: IfNotPresent
  
replicaCount: 3

# Service Configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations: {}

# Ingress Configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: jimini-policy.yourdomain.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: jimini-tls
      hosts:
        - jimini-policy.yourdomain.com

# Resource Management
resources:
  limits:
    cpu: 2000m
    memory: 1Gi
  requests:
    cpu: 500m
    memory: 512Mi

# Horizontal Pod Autoscaling
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Security Context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  capabilities:
    drop:
      - ALL

# Environment Variables
env:
  JIMINI_API_KEY:
    secretName: jimini-secrets
    secretKey: api-key
  OPENAI_API_KEY:
    secretName: jimini-secrets
    secretKey: openai-api-key
  JIMINI_SHADOW: "true"
  LOG_LEVEL: "INFO"
  WORKERS: "4"
  ENABLE_RISK_SCORING: "true"
  ENABLE_POLICY_RECOMMENDATIONS: "true"
  ENABLE_PREDICTIVE_INTELLIGENCE: "true"

# Persistent Storage
persistence:
  enabled: true
  storageClass: "fast-ssd"
  accessMode: ReadWriteOnce
  size: 10Gi
  mountPath: /app/data
  
# Audit Logs Storage
auditStorage:
  enabled: true
  storageClass: "standard"
  accessMode: ReadWriteOnce
  size: 50Gi
  mountPath: /app/logs

# ConfigMap for Rules
configMap:
  enabled: true
  data:
    policy_rules.yaml: |
      # Your policy rules configuration
      rules: []

# Health Checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - namespaceSelector:
            matchLabels:
              name: monitoring
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
    - to: []
      ports:
        - protocol: TCP
          port: 443  # HTTPS outbound for OpenAI API

# ServiceMonitor for Prometheus
serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  path: /v1/metrics
  labels:
    monitoring: jimini

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Node Affinity (optional)
nodeAffinity: {}
  # requiredDuringSchedulingIgnoredDuringExecution:
  #   nodeSelectorTerms:
  #   - matchExpressions:
  #     - key: node-type
  #       operator: In
  #       values:
  #       - compute-optimized

# Pod Anti-Affinity
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
            - key: app.kubernetes.io/name
              operator: In
              values:
                - jimini-ai-policy
        topologyKey: kubernetes.io/hostname

# Tolerations (optional)
tolerations: []

# Redis Configuration (if enabled)
redis:
  enabled: false
  auth:
    enabled: true
    password: "your-redis-password"
  master:
    persistence:
      enabled: true
      size: 8Gi
  metrics:
    enabled: true

# External Secrets (for production)
externalSecrets:
  enabled: false
  secretStore:
    provider: aws
    region: us-west-2
  secrets:
    - name: jimini-secrets
      keys:
        - key: jimini/api-key
          name: api-key
        - key: jimini/openai-api-key
          name: openai-api-key