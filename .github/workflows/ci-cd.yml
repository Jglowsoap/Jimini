# Jimini CI/CD Pipeline
# Complete automation: Build ‚Üí Lint ‚Üí Test ‚Üí Security Scan ‚Üí Package ‚Üí SBOM ‚Üí Deploy

name: "Jimini CI/CD Pipeline"

on:
  push:
    branches: [ main, develop, "release/*" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Phase 1: Linting and Code Quality
  lint:
    name: "üîç Lint & Code Quality"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run Ruff linter
        run: ruff check app/ jimini_cli/ tests/ --output-format=github
        
      - name: Run Black formatter check
        run: black --check --diff app/ jimini_cli/ tests/
        
      - name: Run isort import checker
        run: isort --check-only --diff app/ jimini_cli/ tests/
        
      - name: Run MyPy type checking
        run: mypy app/ jimini_cli/

  # Phase 2: Security Scanning
  security:
    name: "üõ°Ô∏è Security Scan"
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,security]"
          
      - name: Run Bandit security linter
        run: |
          bandit -r app/ jimini_cli/ -f json -o bandit-report.json
          bandit -r app/ jimini_cli/ -f sarif -o bandit-report.sarif
          
      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-report.sarif
          
      - name: Run Safety dependency checker
        run: safety check --json --output safety-report.json
        
      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            bandit-report.sarif
            safety-report.json

  # Phase 3: Comprehensive Testing
  test:
    name: "üß™ Test Suite"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,server,security,monitoring]"
          
      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov=jimini_cli \
                 --cov-report=xml --cov-report=html \
                 --cov-report=term-missing \
                 --cov-fail-under=85 \
                 --junit-xml=pytest-results.xml \
                 tests/
                 
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}

  # Phase 4: Build and Package
  build:
    name: "üì¶ Build & Package"
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    outputs:
      version: ${{ steps.version.outputs.version }}
      wheel-name: ${{ steps.build.outputs.wheel-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for version calculation
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build setuptools-scm[toml] wheel
          
      - name: Calculate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(python -m setuptools_scm)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          
      - name: Build wheel and sdist
        id: build
        run: |
          python -m build
          WHEEL_NAME=$(find dist -name "*.whl" -printf "%f\n")
          echo "wheel-name=$WHEEL_NAME" >> $GITHUB_OUTPUT
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./dist
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ steps.version.outputs.version }}
          path: |
            dist/
            sbom.spdx.json

  # Phase 5: Container Image Build
  container:
    name: "üê≥ Container Build"
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.version }}
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Generate container SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          format: spdx-json
          output-file: container-sbom.spdx.json
          
      - name: Scan container for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          format: sarif
          output-file: container-scan.sarif
          
      - name: Upload container artifacts
        uses: actions/upload-artifact@v4
        with:
          name: container-artifacts
          path: |
            container-sbom.spdx.json
            container-scan.sarif

  # Phase 6: Staging Deployment & Smoke Tests  
  staging:
    name: "üöÄ Staging Deploy & Test"
    runs-on: ubuntu-latest
    needs: [build, container]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.build.outputs.version }}
          
      - name: Deploy to staging
        run: |
          # Deploy using your preferred method (Helm, Terraform, etc.)
          echo "Deploying ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }} to staging"
          # kubectl set image deployment/jimini jimini=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}
          
      - name: Wait for deployment
        run: |
          # Wait for deployment to be ready
          sleep 30
          
      - name: Run smoke tests
        run: |
          # Install jimini CLI for testing
          pip install dist/${{ needs.build.outputs.wheel-name }}
          
          # Test ALLOW decision
          ALLOW_RESULT=$(jimini test --text "Hello world" --endpoint "/api/test" --format json)
          echo "ALLOW test: $ALLOW_RESULT"
          
          # Test BLOCK decision  
          BLOCK_RESULT=$(jimini test --text "SSN: 123-45-6789" --rule-pack cjis --format json)
          echo "BLOCK test: $BLOCK_RESULT"
          
          # Test health endpoint
          curl -f http://staging-jimini.internal/health || exit 1
          
          # Test metrics endpoint
          curl -f http://staging-jimini.internal/v1/metrics || exit 1
          
      - name: Performance smoke test
        run: |
          # Basic load test
          jimini-bench --requests 100 --concurrent 5 --endpoint http://staging-jimini.internal

  # Phase 7: Production Deployment
  production:
    name: "üè≠ Production Deploy"
    runs-on: ubuntu-latest
    needs: [staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Production deployment logic here
          
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            sbom.spdx.json
          generate_release_notes: true

  # Phase 8: Changelog Generation
  changelog:
    name: "üìù Update Changelog"
    runs-on: ubuntu-latest
    needs: [production]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Generate changelog
        uses: orhun/git-cliff-action@v2
        with:
          config: cliff.toml
          args: --verbose --output CHANGELOG.md
          
      - name: Commit changelog
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          git commit -m "chore: update changelog for ${{ github.ref_name }}" || exit 0
          git push